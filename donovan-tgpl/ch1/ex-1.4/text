
dot
net
perls
top
40
c#
example
pages
duplicate
words.
strings
often
contain
duplicate
words.
and
often
these
duplicate
words
are
not
useful.
it
is
possible
to
remove
them
to
simplify
an
algorithm.
this
is
similar
to
the
concept
of
removing
stopwordsâ€”common
words
that
lack
meaning.

required
output
for
duplicate
words

input:
do
or
do
not
there
is
no
try
output:
do
or
not
there
is
no
try
note:
[the
second
'do'
was
removed.]

example.
first,
we
want
to
use
a
data
structure
such
as
dictionary
with
provides
constant-time
lookup
times
for
keys.
we
will
be
processing
words
in
a
loop,
and
we
need
to
check
each
word
against
all
words
already
encountered.

note:
using
two
lists
would
result
in
higher
complexity,
potentially
making
your
program
useless.

based
on:
.net
(2018)

c#
program
that
removes
duplicate
words

using
system;
using
system.collections.generic;
using
system.text;

class
program
{
static
void
main()
{
string
s
=
"do
or
do
not
there
is
no
try.";
console.writeline(s);
console.writeline(removeduplicatewords(s));









s
=
"dot
net
perls
is
a
web
site
about
the
dot
net








framework.";
console.writeline(s);








console.writeline(removeduplicatewords(s));
}





static
public
string
removeduplicatewords(string
v)
{
//
1
//
keep




track
of
words
found
in
this
dictionary.

var
d
=
new




dictionary<string,
bool>();









//
2
//
build
up
string
into
this
stringbuilder.








stringbuilder
b
=
new
stringbuilder();









//
3
//
split
the
input
and
handle
spaces
and
punctuation.








string[]
a
=
v.split(new
char[]
{
'
',
',',
';',
'.'
},








stringsplitoptions.removeemptyentries);









//
4
//
loop
over
each
word
foreach
(string
current
in
a)
{
//








5
//
lowercase
each
word
string
lower
=
current.tolower();













//
6
//
if
we
haven't
already
encountered
the
word,
//












append
it
to
the
result.

if
(!d.containskey(lower))
{












b.append(current).append('
');
d.add(lower,
true);
}
}
//












7
//
return
the
duplicate
words
removed
return












b.tostring().trim();
}
}

output

do
or
do
not
there
is
no
try.

do
or
not
there
is
no
try
dot
net
perls




is
a
web
site
about
the
dot
net
framework.

dot
net
perls
is
a
web




site
about
the
framework
in
this
example
we
see
the
body
of




removeduplicatewords,
as
well
the
console
program
source
that




verifies
its
correctness.
you
can
paste
this
code
into
a
new
c#




program.
it
requires
a
newer
version
of
the
.net
framework.

this




method
calls
split.
by
passing
a
new
char
array
to
string
split,




we
can
deal
with
punctuation.
otherwise,
punctuation
would
be




considered
part
of
the
word.
for
performance,
it
uses




stringbuilder.

stringbuilder
also:
the
dictionary
stores
words




already
encountered.
var
refers
to
the
dictionary.
the
dictionary




improves
the
asymptotic
efficiency.

var
stopwords.
i
used
this




code,
and
also
a
variant
that
removes
stopwords,
to
implement
a




full-text-search
feature
in
a
windows
forms
program.
the




optimization
provided
by
this
code
can
be
seen
in
my
fts3
article.




sqlite
fts3
virtual
table
using
with
databases.
this
style
of
code




in
my
full-text
database
helped
reduce
the
file
size
of
the




resulting
database
by
50%.
it
was
also
much
faster
to
search.
my




warning
here
is
not
to
use
any
methods
that
use
nested
loops.




note:
when
i
last
researched
this,
several
years
ago,
there
was




one
available.
it
would
destroy
performance
with
certain
input.




summary.
we
combined
dictionary
with
stringbuilder
to
develop
a




method
that
removes
duplicate
english
words
efficiently.
the
code




does
lookups
on
each
word
as
it
encounters
them.
this
may
improve




performance
on
long
texts.
